#!/bin/sh
#
# Configure script for 'prwd'
# Copyright (c) 2012-2014 Bertrand Janin <b@janin.com>
#
#

VERSION="1.9"


# Some shells have shitty echos
alias echo=/bin/echo


# Sad default, you can try CC=clang ./configure too
if [ -z "$CC" ]; then
	export CC=gcc
fi


# generate_makefile() - Generate the main Makefile
# $1 - file to append at the end
generate_makefile() {
	echo "# Automagically generated by 'configure'"
	echo

	echo "CFLAGS+=$CFLAGS -std=c99 -pedantic"
	echo "CFLAGS+=-Wall -W -Wpointer-arith -Wbad-function-cast -Wcast-qual"
	echo "CFLAGS+=-Wstrict-prototypes -Wmissing-prototypes"
	echo "CFLAGS+=-Wmissing-declarations -Wnested-externs -Winline"
	echo "CFLAGS+=-DVERSION=\\\"$VERSION\\\" $X_CFLAGS"

	if [ "$DEBUG_MODE" = "Y" ]; then
		echo "CFLAGS+=-Wall -ggdb -O0"
	else
		echo "CFLAGS+=-Wall -O2"
	fi

	if [ -n "$X_OBJECTS" ]; then
		echo "EXTRA_OBJECTS=$X_OBJECTS"
	fi

	echo "CC?=$CC"
	echo "PREFIX?=$PREFIX"
	echo "MANDIR=$MANDIR"

	cat "$1"
}


# usage() - Spit out basic help
usage() {
	echo "usage: ./configure [-h] [-d] [platform]"
	echo
	echo "    -h   this help screen."
	echo "    -d   configure for debug mode (-ggdb -O1)"
	echo
	echo "By default, this script will attempt to detect your OS and will guess the most"
	echo "appropriate configuration. If it gets your system wrong, you can force it,"
	echo "here is the list of ''supported'' platforms:"
	echo
	echo "    bsd     - OpenBSD, FreeBSD, OS X, Darwin, ..."
	echo "    linux   - Linux"
	exit
}


# stuff_not_found() - Exit 'cause we're missing something
stuff_not_found() {
	message="$1"
	echo "not found"
	echo
	echo ERROR: $message
	exit 2
}


# Command-line arguments
while true; do
	case "$1" in
		-h|--help)
			usage
			exit 2
			;;

		-d|--debug)
			echo "Debug mode... enabled"
			DEBUG_MODE="Y"
			shift
			;;

		--prefix=*)
			PREFIX="${1##--prefix=}"
			shift
			;;

		--mandir=*)
			MANDIR="${1##--mandir=}"
			shift
			;;

		# Skip all random long opts passed by packagers thinking this
		# is autoconf-compatible.
		--*)
			shift
			;;

		*)
			break
			;;
	esac
done


# Detect platform
echo -n "Target platform... "
OS=`uname`
if [ -n "$1" ]; then
	OS="$1"
fi
echo $OS


# Platform-specific configuration
case $OS in
	Linux|Unix|POSIX)
		X_CFLAGS="-D_GNU_SOURCE"
		MANDEST="share/man"
		;;

	*BSD)
		;;

	Darwin)
		MANDEST="share/man"
		;;

	*)
		echo
		echo "Sorry but '$OS' is currently unsupported, you can attemp 'bsd' or 'linux' as"
		echo "target and cross your fingers. In order to do that you just need to give either"
		echo "one as parameter to ./configure. You can get the official list of supported "
		echo "platform with ./configure -l"
		exit
esac


# Default paths
[ -z "$PREFIX" ]	&& PREFIX="/usr/local"
[ -z "$MANDEST" ]	&& MANDEST="man"
[ -z "$MANDIR" ]	&& MANDIR="${PREFIX}/${MANDEST}"


# Check for make
echo -n "make... "
cat <<EOF > fake_makefile
all:
	@echo found
EOF
if ! make -f fake_makefile 1>/dev/null 2>/dev/null; then
	stuff_not_found "Make not found (try to install make or gmake)"
fi
echo found
rm -f fake_makefile*


# Check if we have a working cc
echo -n "cc... "
cat <<EOF > fake_cc.c
#include <stdio.h>
main() { printf("woot\n"); }
EOF
if ! ${CC} fake_cc.c -o /dev/null 1>/dev/null 2>/dev/null; then
	stuff_not_found "No C compiler found (try to install gcc or clang)"
fi
echo ${CC}
rm -f fake_cc*


# Check if we have strlcpy
echo -n "strlcpy... "
cat <<EOF > fake_strlcpy.c
main() { char buf[32]; strlcpy(buf, "woot", sizeof(buf)); }
EOF
if ! ${CC} fake_strlcpy.c -o /dev/null 1>/dev/null 2>/dev/null; then
	echo "not found (we'll use ours)"
	X_OBJECTS="$X_OBJECTS strlcpy.o"
	CFLAGS="$CFLAGS -DHAS_NO_STRLCPY"
else
	echo yes
fi
rm -f fake_strlcpy*


# Check if we have wcslcpy
echo -n "wcslcpy... "
cat <<EOF > fake_wcslcpy.c
#include <wchar.h>
main() { wchar_t buf[32]; wcslcpy(buf, L"woot", sizeof(buf)); }
EOF
if ! ${CC} fake_wcslcpy.c -o /dev/null 1>/dev/null 2>/dev/null; then
	echo "not found (we'll use ours)"
	X_OBJECTS="$X_OBJECTS wcslcpy.o"
	CFLAGS="$CFLAGS -DHAS_NO_WCSLCPY"
else
	echo yes
fi
rm -f fake_wcslcpy*

# Check if we have wcstonum
echo -n "wcstonum... "
cat <<EOF > fake_wcstonum.c
main() { int i; const char *errstr; i = wcstonum("42", 1, 64, &errstr); }
EOF
if ! ${CC} fake_wcstonum.c -o /dev/null 1>/dev/null 2>/dev/null; then
	echo "not found (we'll use ours)"
	X_OBJECTS="$X_OBJECTS wcstonum.o"
	CFLAGS="$CFLAGS -DHAS_NO_WCSTONUM"
else
	echo yes
fi
rm -f fake_wcstonum*


generate_makefile Makefile.src > Makefile
generate_makefile src/Makefile.src > src/Makefile

echo
echo "Configured for '$OS', run 'make' (or 'gmake') to compile."

